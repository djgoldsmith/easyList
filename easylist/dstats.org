* Casting

#+begin_src python :results output :results table :exports results 
  dice=range(1,13)
  header=["Dice",]# "% success","% Peril"]
  
  table=[]
  #table.append(header)
  
  
  
  def fact(n):
      if n<=2:
          return n
      else:
          return n*fact(n-1)
  
  def C(n,k):
      if k>n: return 0
      if k==n: return 1
      return fact(n)/(fact(k) * fact(n-k))
  
  def P(k, n): #probability of k sixes in n d6
      p=1/6.0
      q=5/6.0
      return C(n,k)*p**k*q**(n-k)
  targets=[1,2,3,4]
  for target in targets:
      header.append("%% success %d"%target)
  header.append("% Peril")
  for i in dice:
      row=[i]
      for target in targets:
          succ=1-(1-0.5**target)**i
          row.append(round(succ,2))
          peril=0
          if i>1:
              for j in range(2,i+1):
                  peril+= P(j,i)
                  
      row.append(round(peril,2))
      table.append(row)
  
  print [header]+table
  
  
  
#+end_src
#+RESULTS:
| Dice | % success 1 | % success 2 | % success 3 | % success 4 | % Peril |
|    1 |         0.5 |        0.25 |        0.13 |        0.06 |     0.0 |
|    2 |        0.75 |        0.44 |        0.23 |        0.12 |    0.03 |
|    3 |        0.88 |        0.58 |        0.33 |        0.18 |    0.07 |
|    4 |        0.94 |        0.68 |        0.41 |        0.23 |    0.13 |
|    5 |        0.97 |        0.76 |        0.49 |        0.28 |     0.2 |
|    6 |        0.98 |        0.82 |        0.55 |        0.32 |    0.26 |
|    7 |        0.99 |        0.87 |        0.61 |        0.36 |    0.33 |
|    8 |         1.0 |         0.9 |        0.66 |         0.4 |     0.4 |
|    9 |         1.0 |        0.92 |         0.7 |        0.44 |    0.46 |
|   10 |         1.0 |        0.94 |        0.74 |        0.48 |    0.52 |
|   11 |         1.0 |        0.96 |        0.77 |        0.51 |    0.57 |
|   12 |         1.0 |        0.97 |         0.8 |        0.54 |    0.62 |


* Denial

#+begin_src python :results output :results table :exports results
  def fact(n):
      if n<=2:
          return n
      else:
          return n*fact(n-1)
  
  def C(n,k):
      if k>n: return 0
      if k==n: return 1
      return fact(n)/(fact(k) * fact(n-k))
  
  def P(k, n): #probability of k sixes in n d6
      p=1/6.0
      q=5/6.0
      return C(n,k)*p**k*q**(n-k)
  
  dice=range(1,12)
  targets=[1,2,3,4,5,6]
  header=["Dice",]# "% success","% Peril"]
  header+=["%% %dx6"%i for i in targets]
  table=[header]
  #table.append(header)
  for d in dice:
      row=[d]
      for t in targets:
          prob=0
          for p in range(t,max(dice)):
              prob+=P(p,d)
          row.append("%0.5f"%prob)
      table.append(row)
  print table
  
#+end_src

#+RESULTS:
| Dice |   % 1x6 |   % 2x6 |   % 3x6 |   % 4x6 |   % 5x6 |   % 6x6 |
|    1 | 0.16667 | 0.00000 | 0.00000 | 0.00000 | 0.00000 | 0.00000 |
|    2 | 0.30556 | 0.02778 | 0.00000 | 0.00000 | 0.00000 | 0.00000 |
|    3 | 0.42130 | 0.07407 | 0.00463 | 0.00000 | 0.00000 | 0.00000 |
|    4 | 0.51775 | 0.13194 | 0.01620 | 0.00077 | 0.00000 | 0.00000 |
|    5 | 0.59812 | 0.19624 | 0.03549 | 0.00334 | 0.00013 | 0.00000 |
|    6 | 0.66510 | 0.26322 | 0.06229 | 0.00870 | 0.00066 | 0.00002 |
|    7 | 0.72092 | 0.33020 | 0.09578 | 0.01763 | 0.00200 | 0.00013 |
|    8 | 0.76743 | 0.39532 | 0.13485 | 0.03066 | 0.00461 | 0.00044 |
|    9 | 0.80619 | 0.45734 | 0.17826 | 0.04802 | 0.00895 | 0.00114 |
|   10 | 0.83849 | 0.51548 | 0.22477 | 0.06973 | 0.01546 | 0.00244 |
|   11 | 0.86541 | 0.56932 | 0.27322 | 0.09557 | 0.02451 | 0.00461 |



* Previously

 - Warlock: 72% chance to succeed with WC1 power, 6% chance to peril
 - Seer: 92% chance to succeed with WC1 power, 6% chance to peril

* To do

** TODO Show deny probability with X dice
** TODO Show "power" of casting (most likely number of successes) to show in table (and plot)


